Option Explicit
Public WB0 As Workbook, TmpCell As Range, TmpSheet As Worksheet
Public ObjWS_Config As Object, ObjCell_SearchPath As Object, ObjCell_Result As Object, ObjCell_Name As Object
Public Const ObjWS_Config_Name As String = "CONFIG_PAGE"

Public Const MAXNUM_STARMARK As Integer = 5
Public Const MAXNUM_FILEFIND As Integer = 100
Public Const MAXNUM_CURVESERIES As Integer = 50

Public Const MAXNUM_DATAFINDTIME As Integer = 15

Public Const SET_CHTW As Integer = 400
Public Const SET_CHTH As Integer = 300
Public Const SET_CHTC As Integer = 3
Public Const SET_CHTL As Integer = 500
Public Const SET_CHTT As Integer = 15

Public Const SET_INTROW As Integer = 14: Public Const SET_INTCOL As Integer = 1
Public Const SET_CALCROW As Integer = 2: Public Const SET_CALCCOL As Integer = 1

Public Const SET_XCOL As Integer = SET_INTCOL + 1: Public Const SET_YCOL As Integer = SET_INTCOL + 2
Public Const SET_XNCOL As Integer = SET_INTCOL + 3: Public Const SET_YNCOL As Integer = SET_INTCOL + 4
Public Const SET_FCOL As Integer = SET_INTCOL + 5: Public Const SET_PATHCOL As Integer = SET_INTCOL + 6

Public Function ChartProperty(myChart As Chart, ChartName$, XName$, YName$, Y2Name$)
    With myChart
        .HasTitle = True: .ChartTitle.Text = ChartName
        .PlotArea.Border.LineStyle = xlSolid: .PlotArea.Border.Weight = 3: .PlotArea.Border.ColorIndex = 1
        .HasLegend = True: .Legend.IncludeInLayout = False: .Legend.Position = xlLegendPositionBottom
        .Legend.Font.Size = 10: If .SeriesCollection.Count > 5 Then .Legend.Font.Size = 7
        If .Legend.Position = xlLegendPositionBottom Then
            .Legend.Width = SET_CHTW - 2: .Legend.Height = 0.15 * SET_CHTH
            .Legend.Left = 2: .Legend.Top = SET_CHTH - myChart.Legend.Height
        End If
        .PlotArea.Height = 0.7 * SET_CHTH
        With .Axes(xlCategory, xlPrimary) 'X
            .HasTitle = True
            .AxisTitle.Text = XName
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = YName
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
    End With
    Dim srs As Series
    For Each srs In myChart.SeriesCollection
            srs.Border.Weight = xlHairline '1.25 Default
            srs.MarkerStyle = xlMarkerStyleCircle
            srs.MarkerSize = 3
            srs.MarkerBackgroundColorIndex = xlColorIndexNone
            srs.MarkerForegroundColor = srs.Border.Color
    Next srs
End Function
Public Function DataRange(ByVal Datasheet As Object, sPara$) As Range
    Dim iCnt%, DataCell As Range
    If Datasheet.FilterMode Then Datasheet.ShowAllData
    If Len(Trim(sPara)) = 1 Then
        Set DataCell = Datasheet.Cells.Find(What:=sPara, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True)
        If DataCell Is Nothing Then Set DataCell = Datasheet.Cells.Find(What:=Chr(32) & sPara, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True)
    Else
        Set DataCell = Datasheet.Cells.Find(What:=sPara, SearchOrder:=xlByRows, LookAt:=xlPart, MatchCase:=True)
    End If
      Do While iCnt < MAXNUM_DATAFINDTIME
        If DataCell Is Nothing Then MsgBox ("Cannot find " & sPara & " for " & Datasheet.Name): Exit Do
        If Trim(DataCell.Value) = sPara And IsNumeric(DataCell.Offset(1).Text) And IsNumeric(DataCell.Offset(2).Text) And IsNumeric(DataCell.Offset(3).Text) Then
            Set DataRange = DataCell.Offset(1).Resize(DataCell.End(xlDown).Row - DataCell.Row)
            Exit Function
        Else
            Set DataCell = Datasheet.Cells.FindNext(DataCell)
            iCnt = iCnt + 1
        End If
    Loop
    Set DataRange = Nothing
End Function
Public Function DataArray(ByVal DataRng As Range) As Variant
    Dim iCnt%, TmpArray() As Variant
    ReDim TmpArray(0)
    If DataRng Is Nothing Then: DataArray = TmpArray: Exit Function
    ReDim TmpArray(0 To DataRng.Count)
    For iCnt = 0 To DataRng.Count
        TmpArray(iCnt) = DataRng(iCnt + 1).Value
    Next iCnt
    DataArray = TmpArray
End Function
Public Function Data2Chart(myChart As Chart, ByVal Datasheet As Object, sFilter$, sParaX$, sParaY$)
    Dim iRow%, iInterval%, iCnt%, DataCell As Range, DataFilter As Range
    If sFilter <> "" Then
        iInterval = 0: iRow = 0: iCnt = 0
        Set DataFilter = DataRange(Datasheet, sFilter)
        If DataFilter Is Nothing Then Exit Function
        For Each DataCell In DataFilter
            If iCnt > MAXNUM_CURVESERIES Then MsgBox (" Too many curves for " & Datasheet.Name): Exit Function
            iRow = iRow + 1
            If DataCell.Value <> DataCell.Offset(1).Value Then
                If iInterval = 0 Then iInterval = iRow
                If iInterval = 0 Then Exit Function
                With myChart.SeriesCollection.NewSeries
                    .MarkerSize = 3
                    .MarkerBackgroundColorIndex = xlColorIndexNone
                    .MarkerForegroundColorIndex = xlColorIndexNone
                    .XValues = DataArray(DataRange(Datasheet, sParaX).Offset(iCnt * iInterval).Resize(iInterval))
                    .Values = DataArray(DataRange(Datasheet, sParaY).Offset(iCnt * iInterval).Resize(iInterval))
                    .Name = Datasheet.Name & " " & sFilter & " = " & DataCell.Value
                End With
                If DataCell.Offset(1).Value = "" Then: Exit For
                iCnt = iCnt + 1
            End If
        Next DataCell
    Else
        With myChart.SeriesCollection.NewSeries
            .XValues = DataArray(DataRange(Datasheet, sParaX))
            .Values = DataArray(DataRange(Datasheet, sParaY))
            .Name = Datasheet.Name
        End With
    End If
End Function
Public Function FilePath
Public Function GetWorkSheet
Public Function CheckSheet
Public Function IsInArray
'====================================SUBJECT'===
Sub InitGlobals()
    Set WB0 = ActiveWorkbook
    Set ObjWS_Config = ActiveWorkbook.Worksheets(ObjWS_Config_Name)
    Set ObjCell_SearchPath = ObjWS_Config.Cells(SET_INTROW + 1, SET_PATHCOL)
    Set ObjCell_Result = ObjCell_SearchPath.Offset(1).Resize(MAXNUM_FILEFIND)
    Set ObjCell_Name = ObjCell_Result.Offset(, SET_INTCOL - SET_PATHCOL)
End Sub
Sub ListFile()
Sub NameDefine() 'off
Sub ExtractData()
Sub ChartGen()
    Call InitGlobals
    Dim iSheetNum%, ChartName$, sNameX$, sNameY$, sNameY2$, sParaX$, sParaY$, sParaY2$, sFilter$, myChart As Chart
    Dim Color(MAXNUM_CURVESERIES) As Variant, iCnt%, iGroup%, iLeft%, iTop%: iLeft = SET_CHTL: iTop = SET_CHTT
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete
    Dim iBlank%
    For Each TmpCell In ObjCell_Name
    If Trim(TmpCell) <> "" And TmpCell.Interior.Pattern = xlNone Then TmpCell.Interior.Color = 16777215 - 65793 * iBlank: iBlank = iBlank + 1
    Next TmpCell
For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" And TmpCell.Interior.Pattern <> xlNone And Not IsInArray(TmpCell.Interior.Color, Color()) Then: Color(iCnt) = TmpCell.Interior.Color: iCnt = iCnt + 1
        If iCnt > MAXNUM_CURVESERIES Then End
    Next TmpCell
    For iGroup = 0 To iCnt - 1
        ChartName = ""
        Set myChart = ObjWS_Config.ChartObjects.Add(Left:=iLeft, Top:=iTop, Width:=SET_CHTW, Height:=SET_CHTH).Chart: myChart.ChartType = xlXYScatterLines 'xlXYScatter
        For Each TmpCell In ObjCell_Name
            If TmpCell.Interior.Color = Color(iGroup) And CheckSheet(CStr(TmpCell.Value)) Then
                If ChartName = "" Then ChartName = Trim(TmpCell): sParaY2 = Trim(TmpCell.Offset(, SET_YCOL - SET_INTCOL))
                sParaX = Trim(TmpCell.Offset(, SET_XCOL - SET_INTCOL)): sNameX = Trim(TmpCell.Offset(, SET_XNCOL - SET_INTCOL))
                sParaY = Trim(TmpCell.Offset(, SET_YCOL - SET_INTCOL)): sNameY = Trim(TmpCell.Offset(, SET_YNCOL - SET_INTCOL))
                sFilter = Trim(TmpCell.Offset(, SET_FCOL - SET_INTCOL))
                Call Data2Chart(myChart, WB0.Worksheets(TmpCell.Value), sFilter, sParaX, sParaY)
                If sParaY <> sParaY2 Then myChart.SeriesCollection(myChart.SeriesCollection.Count).AxisGroup = 2
            End If
        Next TmpCell
    Call ChartProperty(myChart, ChartName, sNameX, sNameY, sNameY)
    If myChart.HasAxis(xlCategory, xlSecondary) = True Then
        With myChart.Axes(xlValue, xlSecondary)
            .HasTitle = True
            .AxisTitle.Text = sNameY2
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
    End If
    If (ObjWS_Config.ChartObjects.Count) Mod SET_CHTC = 0 Then
        iLeft = SET_CHTL: iTop = iTop + SET_CHTH
    Else
        iLeft = iLeft + SET_CHTW
    End If
    Next iGroup
End Sub
Sub ColorIndex() 'off
    Dim rCnt%, cCnt%
    rCnt = SET_INTROW + 2: cCnt = 1
    Do While rCnt < 57
        Cells(rCnt, cCnt).Interior.ColorIndex = rCnt
        'Cells(rCnt, cCnt) = rCnt
        rCnt = rCnt + 1
    Loop
End Sub
Sub Calculate()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Dim CalcSheet As Worksheet, sWBName$, VdCol%, IdCol%, VgCol%, LastCol%, TitleRow%, Vdd#, Vgg#, Crit#, Width#, Length#, Finger#, NPType%
    sWBName = Trim(ObjWS_Config.Cells(SET_CALCROW, SET_CALCCOL + 3))
    If Not CheckSheet(sWBName) Then End
    Set CalcSheet = WB0.Worksheets(sWBName)
    Finger = 2
    Width = Trim(ObjWS_Config.Cells(SET_CALCROW + 3, SET_CALCCOL + 6))
    Length = Trim(ObjWS_Config.Cells(SET_CALCROW + 4, SET_CALCCOL + 6))
    Vgg = Trim(ObjWS_Config.Cells(SET_CALCROW + 2, SET_CALCCOL + 6))
    If Width = "" Then Width = 20: If Length = "" Then Length = 0.5: If Vgg = "" Then Vgg = 3.3
    Set TmpCell = DataRange(CalcSheet, "Vd")
    VdCol = TmpCell.Column
    VgCol = DataRange(CalcSheet, "Vg").Column
    IdCol = DataRange(CalcSheet, "Id").Column
    TitleRow = TmpCell.Row - 1
    If TitleRow = 0 Then TitleRow = 1
    LastCol = 2
    Do While CalcSheet.Cells(TitleRow, LastCol) <> ""
        If LastCol > 20 Then MsgBox ("Too many columns"): End
        LastCol = LastCol + 1
    Loop
    Vdd = CalcSheet.Cells(TitleRow + 1, VdCol)
    NPType = 1
    If Vdd < 0 Then NPType = -1
    Crit = 0.0000001 * Width * Finger / Length * NPType
    'Calculate the Vtlin/Vtsat
    Dim i%, IdL#, IdH#, VgL#, VgH#, Vtlin#, Vtgm#, Gmmax#, Idlin#
    i = TitleRow + 2
    Do While CalcSheet.Cells(i, IdCol) <> ""
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        If (Abs(IdL) < Abs(Crit)) And (Abs(IdH) > Abs(Crit)) Then Vtlin = (Crit - IdL) / (IdH - IdL) * (VgH - VgL) + VgL: Exit Do
        i = i + 1
        If i > 2000 Then MsgBox ("Data too many"): End
    Loop
    If CalcSheet.Cells(i, IdCol) = "" Then Vtlin = 999
    
    'Calculate the Vtgm
    Dim Flag%
    i = TitleRow + 2: Gmmax = -10000: Flag = 0
    If Trim(CalcSheet.Cells(TitleRow, LastCol - 1)) <> "Gm" Then CalcSheet.Cells(TitleRow, LastCol) = "Gm": CalcSheet.Cells(TitleRow + 1, LastCol) = 0: Flag = 1
    Do While CalcSheet.Cells(i, IdCol) <> ""
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        If Flag = 1 Then CalcSheet.Cells(i, LastCol) = (IdH - IdL) / (VgH - VgL)
        If Vtgm = 0 And VgL * NPType >= 0 Then
            If Gmmax < ((IdH - IdL) / (VgH - VgL)) Then
                Gmmax = (IdH - IdL) / (VgH - VgL)
            Else
                Vtgm = VgL - IdL / Gmmax - 0.5 * Vdd
            End If
        End If
        i = i + 1
        If i > 2000 Then MsgBox ("Data too many"): End
    Loop
    'Calculate the Idlin(A)
    i = TitleRow + 2
    Do While CalcSheet.Cells(i, VgCol).Value <> ""
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        If (Abs(VgL) <= Abs(Vgg)) And (Abs(VgH) >= Abs(Vgg)) Then Idlin = (Vgg - VgL) / (VgH - VgL) * (IdH - IdL) + IdL: Exit Do
        i = i + 1
    Loop
    If CalcSheet.Cells(i, IdCol) = "" Then Idlin = 999
    'Output
    ObjWS_Config.Cells(SET_CALCROW + 1, SET_CALCCOL + 3).ClearContents
    ObjWS_Config.Cells(SET_CALCROW + 2, SET_CALCCOL + 3).ClearContents
    ObjWS_Config.Cells(SET_CALCROW + 3, SET_CALCCOL + 3).ClearContents
    ObjWS_Config.Cells(SET_CALCROW + 5, SET_CALCCOL + 3).ClearContents
    ObjWS_Config.Cells(SET_CALCROW + 6, SET_CALCCOL + 3).ClearContents
    If Abs(Vdd) = 0.1 Then
        ObjWS_Config.Cells(SET_CALCROW + 2, SET_CALCCOL + 3) = Vtlin
        ObjWS_Config.Cells(SET_CALCROW + 1, SET_CALCCOL + 3) = Vtgm
        ObjWS_Config.Cells(SET_CALCROW + 6, SET_CALCCOL + 3) = Idlin * 1000000 / Width / Finger
    Else
        ObjWS_Config.Cells(SET_CALCROW + 3, SET_CALCCOL + 3) = Vtlin 'Vtsat
        ObjWS_Config.Cells(SET_CALCROW + 5, SET_CALCCOL + 3) = Idlin * 1000000 / Width / Finger 'Idsat
    End If
    ObjWS_Config.Select
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Sub ReGroup()
    Call InitGlobals
    Dim srs As Series, chartset As ChartObject
    For Each chartset In ObjWS_Config.ChartObjects
            For Each srs In chartset.Chart.SeriesCollection
                For Each TmpCell In ObjCell_Name
                    Dim Flag%: Flag = 0
                    If (InStr(srs.Name, TmpCell.Value) Or srs.Name = TmpCell.Value) And TmpCell.Value <> "" And (Flag = 0 Or srs.Name = TmpCell.Value) Then
                        Flag = 1
                        srs.Border.Color = TmpCell.Interior.Color
                        srs.MarkerForegroundColor = TmpCell.Interior.Color
                    End If
                Next TmpCell
            Next srs
    Next chartset
End Sub
Sub Export()
Sub LoadPPT()
    Call InitGlobals
    Dim iCnt%, iSld%, Shp As Object, chtObj As Object, ObjPPT As Object, ObjPPTSld As Object
    Set ObjPPT = CreateObject("PowerPoint.Application").Presentations.Add
    iSld = 1
  For Each chtObj In WB0.Worksheets(ObjWS_Config_Name).ChartObjects
      If iCnt = 0 Then Set ObjPPTSld = ObjPPT.Slides.Add(iSld, 12)
      iCnt = iCnt + 1
      chtObj.CopyPicture
      Set Shp = ObjPPTSld.Shapes.Paste
      Shp.Width = 320
      Shp.Height = 180
      Shp.Left = 10 + ((iCnt - 1) Mod SET_CHTC) * Shp.Width
      If SET_CHTC = 3 Then Shp.Left = 120 + ((iCnt - 1) Mod SET_CHTC) * Shp.Width
      Shp.Top = 0 + Int((iCnt - 1) / SET_CHTC) * Shp.Height
      If iCnt = 9 Then iCnt = 0: iSld = iSld + 1
  Next chtObj
End Sub
Sub Reset()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete
    For Each TmpSheet In WB0.Worksheets
        If TmpSheet.Name <> ObjWS_Config.Name Then TmpSheet.Delete
    Next
    With ObjCell_Name
        .ClearFormats
        .Font.Name = "Calibri"
        .Font.Size = 11
        .Font.Bold = False
        .HorizontalAlignment = xlCenter
    End With
    ObjCell_Result.ClearContents
    ObjCell_SearchPath.Offset(1) = "R:\Path\*"
    ObjCell_Result.Font.ColorIndex = 48
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Sub SetupChartGen()
    Dim Shp As Shape
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    ActiveWorkbook.Worksheets(1).Name = ObjWS_Config_Name
    Call InitGlobals
    ObjCell_Name.ClearContents
    For Each Shp In WB0.Worksheets(ObjWS_Config_Name).Shapes
        Shp.Delete
    Next
    WB0.Worksheets(ObjWS_Config_Name).Cells.Font.Name = "Calibri"
    For Each TmpCell In WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_INTCOL).Resize(, SET_PATHCOL)
        With TmpCell
            .ClearFormats
            .Font.Name = "Calibri"
            .Font.Size = 11
            .Font.Bold = True
            .Font.ColorIndex = 1
            .Interior.ThemeColor = xlThemeColorDark1
            .Interior.TintAndShade = -0.05
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .ColumnWidth = 8.38
        End With
    Next TmpCell
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_INTCOL).Value = "Chart Colours Cluster Control"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_XCOL).Value = "Xaxis"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_YCOL).Value = "Yaxis"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_XNCOL).Value = "Xtitle"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_YNCOL).Value = "Ytitle"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_FCOL).Value = "Filter"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_PATHCOL).Value = "<Path>"
    With WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_INTCOL)
        '.Interior.ColorIndex = 15
        .ColumnWidth = 25.14
    End With
    With WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW + 1, SET_PATHCOL)
        .Interior.ColorIndex = 15
        .HorizontalAlignment = xlLeft
    End With
    For Each TmpCell In WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_INTCOL).Resize(, SET_PATHCOL)
        Set Shp = WB0.Worksheets(ObjWS_Config_Name).Shapes.AddShape(msoShapeRectangle, TmpCell.Left, TmpCell.Top, TmpCell.Width, TmpCell.Height)
        With Shp
            If TmpCell.Width > 73 And (TmpCell.Column = SET_INTCOL Or TmpCell.Column = SET_PATHCOL) Then .Width = TmpCell.Width / 3
            .TextFrame2.TextRange.Text = "Click"
            .TextFrame2.TextRange.Font.Name = "Calibri"
            .TextFrame2.TextRange.Font.Size = 11
            .TextFrame2.TextRange.Font.Italic = True
            .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(77, 77, 77)
            .TextFrame.HorizontalAlignment = xlHAlignCenter
            .TextFrame.VerticalAlignment = xlVAlignCenter
            .Fill.ForeColor.RGB = RGB(222, 222, 222)
        End With
    Next TmpCell
    WB0.Worksheets(ObjWS_Config_Name).Shapes(1).TextFrame2.TextRange.Text = "Reset"
    ...
  Call Reset
End Sub
Sub SetupCalculation()
    ActiveWorkbook.Worksheets(1).Name = ObjWS_Config_Name
    Call InitGlobals
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 1, SET_CALCCOL).Value = "Vd=0.1V, extracted from Vg@Gm(max)"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL).Value = "Vd=0.1V, search Vg when Id=1.0e-7*(W/L)"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 3, SET_CALCCOL).Value = "Vd=Vdd, search Vg when Id=1.0e-7*(W/L)"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 4, SET_CALCCOL).Value = "Vg=0V, sensing Id@Vd=1.1*Vdd"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 5, SET_CALCCOL).Value = "Vd=Vdd, sensing Id@Vg=5V"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 6, SET_CALCCOL).Value = "Vd=0.1V, sensing Id@Vg=5V"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 7, SET_CALCCOL).Value = "Vd=Vdd/2V sensing Id @Vg=Vtgm + 0.2"
    
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 9, SET_CALCCOL).Value = "Gm= (Id2-Id1)/(Vg2-Vg1), (Id1@Vg1=Vtgm+Vgshift-dVg; Id2@Vg2=Vtgm+Vgshift+dVg), Vd=Vdd/2, Vgshift=0.2, dVg=0.025"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 10, SET_CALCCOL).Value = "Gds=(Id2-Id1)/(Vd2-Vd1),  (Id1@Vd1=Vdd/2-dVd; Id2@Vd2=Vdd/2+dVd), Vg=Vtgm+Vgshift,  Vgshift=0.2, dVd=0.05"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 1, SET_CALCCOL + 2).Value = "IdVg:"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 1, SET_CALCCOL + 2).Value = "Vtgm"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 2).Value = "Vtlin"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 3, SET_CALCCOL + 2).Value = "Vtsat"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 4, SET_CALCCOL + 2).Value = "Ioff"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 5, SET_CALCCOL + 2).Value = "Idsat"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 6, SET_CALCCOL + 2).Value = "Idlin"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 7, SET_CALCCOL + 2).Value = "Ida"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 8, SET_CALCCOL + 2).Value = "Rsp" '0.1*1000000/(W*Idlin)*1000*(W*Pitch/1000000)
    
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 5).Value = "Vgg"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 5).Value = "W"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 5).Value = "L"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 5).Value = "Pitch"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_CALCROW + 2, SET_CALCCOL + 5).Value = "A"
End Sub
